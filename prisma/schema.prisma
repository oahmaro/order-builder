generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String?
  lastName  String?
  username  String?   @unique
  email     String?   @unique
  password  String?
  role      UserRole  @default(USER)
  active    Boolean   @default(true)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  auditLogs Audit[]
}

enum UserRole {
  USER
  ADMIN
}

model Customer {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  phones      Phone[]
  email       String?   @unique
  dateOfBirth String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  orders    Order[]
  address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?

  @@index([addressId])
}

model Phone {
  id        Int       @id @default(autoincrement())
  number    String
  type      PhoneType @default(MOBILE)
  isPrimary Boolean   @default(false)
  
  customerId Int?
  customer  Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  companyId Int?
  company   Company?  @relation(fields: [companyId], references: [id])

  @@unique([number])
  @@index([customerId])
  @@index([companyId])
}

enum PhoneType {
  MOBILE
  HOME
  WORK
  OTHER
}

model Address {
  id            Int     @id @default(autoincrement())
  streetAddress String?
  aptSuite      String?
  city          String?
  stateProvince String?
  postalCode    String?
  country       String?
  latitude      Float?
  longitude     Float?

  company    Company?
  customers  Customer[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Company {
  id      Int     @id @default(autoincrement())
  name    String
  email   String
  phones  Phone[]

  addressId Int     @unique
  address   Address @relation(fields: [addressId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([addressId])
}

model Frame {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  orderItems OrderItem[]
}

model Adhesion {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  orderItems OrderItem[] @relation("AdhesionToOrderItem")
}

model Print {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  orderItems OrderItem[] @relation("PrintToOrderItem")
}

model Description {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  orderItems OrderItem[] @relation("DescriptionToOrderItem")
}

model Passepartout {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  orderItems OrderItem[] @relation("PassepartoutToOrderItem")
}

enum OrderStatus {
  NEW         // Order has just been created and needs to be started
  COMPLETED   // Order has been delivered/picked up by customer
  CANCELED    // Order has been canceled
}

model Order {
  id         Int         @id @default(autoincrement())
  customerId Int
  customer   Customer    @relation(fields: [customerId], references: [id])
  amountPaid Float
  status     OrderStatus
  orderItems OrderItem[]
  
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt

  @@index([customerId])
}

model OrderItem {
  id          Int    @id @default(autoincrement())
  orderId     Int
  order       Order  @relation(fields: [orderId], references: [id])

  frameId     Int?
  frame       Frame? @relation(fields: [frameId], references: [id])

  adhesions     Adhesion[]     @relation("AdhesionToOrderItem")
  prints        Print[]        @relation("PrintToOrderItem")
  descriptions  Description[]  @relation("DescriptionToOrderItem")
  passepartouts Passepartout[] @relation("PassepartoutToOrderItem")

  height            Float
  width             Float
  passepartoutNum   Int
  passepartoutWidth Float
  glassTypes        Json
  unitPrice         Float
  quantity          Int
  price             Float
  notes             String?
  image             String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  orderIndex Int @default(0)

  @@index([orderId])
  @@index([frameId])
}

model Audit {
  id         Int      @id @default(autoincrement())
  entityId   Int      
  entityType String   // e.g., "Print", "Order"
  action     String   // "CREATE", "UPDATE"
  changes    Json?    // Store what changed
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  timestamp  DateTime @default(now())

  @@index([userId])
  @@index([entityId, entityType])
}
