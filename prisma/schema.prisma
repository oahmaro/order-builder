generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String?
  lastName  String?
  username  String? @unique
  email     String? @unique
  password  String?

  registrationToken String?

  role   UserRole @default(USER)
  active Boolean  @default(true)

  createdCustomers Customer[] @relation("CreatedByCustomer")
  updatedCustomers Customer[] @relation("UpdatedByCustomer")

  createdOrders Order[] @relation("CreatedByOrder")
  updatedOrders Order[] @relation("UpdatedByOrder")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Customer {
  id          Int     @id @default(autoincrement())
  firstName   String
  lastName    String
  phones      Phone[]
  email       String?
  dateOfBirth String?

  createdBy   User? @relation("CreatedByCustomer", fields: [createdById], references: [id])
  createdById Int?

  updatedBy   User? @relation("UpdatedByCustomer", fields: [updatedById], references: [id])
  updatedById Int?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  orders    Order[]
  address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?

  @@index([createdById])
  @@index([updatedById])
  @@index([addressId])
}

model Phone {
  id          Int      @id @default(autoincrement())
  countryCode String
  number      String
  type        PhoneType @default(MOBILE)
  isPrimary   Boolean   @default(false)
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  Int

  @@unique([countryCode, number])
  @@index([customerId])
}

enum PhoneType {
  MOBILE
  HOME
  WORK
  OTHER
}

model Address {
  id            Int     @id @default(autoincrement())
  streetAddress String?
  aptSuite      String?
  city          String?
  stateProvince String?
  postalCode    String?
  country       String?
  latitude      Float?
  longitude     Float?

  customers Customer[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Frame {
  id   Int    @id @default(autoincrement())
  code String @unique // Unique code for each frame

  orderItems OrderItem[]
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
}

model Adhesion {
  id   Int    @id @default(autoincrement())
  name String

  orderItems OrderItem[]
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
}

model Print {
  id   Int    @id @default(autoincrement())
  name String

  orderItems OrderItem[]
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
}

model Description {
  id   Int    @id @default(autoincrement())
  name String

  orderItems OrderItem[]
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
}

enum OrderStatus {
  PENDING // The order has been placed but not yet processed.
  PROCESSING // The order is being handled, items are being picked, and it's in the process of being fulfilled.
  SHIPPED // The order has been shipped and is on its way to the customer.
  DELIVERED // The customer has received the order successfully.
  CANCELLED // The order was cancelled, either by the customer or due to some other reason.
  REFUNDED // The payment for the order has been refunded to the customer.
  ON_HOLD // The order is temporarily on hold, possibly awaiting some action or clarification.
}

model Order {
  id Int @id @default(autoincrement())

  // Reference to the customer placing the order
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  createdBy   User? @relation("CreatedByOrder", fields: [createdById], references: [id])
  createdById Int?

  updatedBy   User? @relation("UpdatedByOrder", fields: [updatedById], references: [id])
  updatedById Int?

  totalAmount     Float
  amountPaid      Float
  remainingAmount Float

  status OrderStatus

  orderItems OrderItem[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([customerId])
  @@index([createdById])
  @@index([updatedById])
}

model OrderItem {
  id Int @id @default(autoincrement())

  // Reference to the order
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  // Reference to the frame being ordered
  frameId Int
  frame   Frame @relation(fields: [frameId], references: [id])

  // Reference to the adhesion associated with the order item
  adhesionId Int?
  adhesion   Adhesion? @relation(fields: [adhesionId], references: [id])

  // Reference to the adhesion associated with the order item
  printId Int?
  print   Print? @relation(fields: [printId], references: [id])

  // Reference to the description associated with the order item
  descriptionId Int?
  description   Description? @relation(fields: [descriptionId], references: [id])

  height            Float
  width             Float
  passepartoutNum   Int
  passepartoutWidth Float
  glassTypes        Json

  unitPrice Float
  quantity  Int
  price     Float

  notes String?
  image String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([orderId])
  @@index([frameId])
  @@index([adhesionId])
  @@index([printId])
  @@index([descriptionId])
}
